{
    "meta": {
        "created": 1569059066,
        "wp_version": "5.2.3",
        "csb_version": "3.2.3",
        "theme_name": "SmartMag | Shared by VestaThemes.com",
        "theme_version": "3.1.0",
        "description": "&lt;?php\r\n\r\n\/\/ Load additional Pro-modules.\r\nrequire_once CSB_INC_DIR . \\'class-custom-sidebars-widgets.php\\';\r\nrequire_once CSB_INC_DIR . \\'class-custom-sidebars-editor.php\\';\r\nrequire_once CSB_INC_DIR . \\'class-custom-sidebars-replacer.php\\';\r\nrequire_once CSB_INC_DIR . \\'class-custom-sidebars-explain.php\\';\r\n\r\n\r\n\/**\r\n * Main plugin file.\r\n * The CustomSidebars class encapsulates all our plugin logic.\r\n *\/\r\nclass CustomSidebars {\r\n\t\/**\r\n\t * Prefix used for the sidebar-ID of custom sidebars. This is also used to\r\n\t * distinguish theme sidebars from custom sidebars.\r\n\t * @var  string\r\n\t *\/\r\n\tstatic protected $sidebar_prefix = \\'cs-\\';\r\n\r\n\t\/**\r\n\t * Capability required to use *any* of the plugin features. If user does not\r\n\t * have this capability then he will not see any change on admin dashboard.\r\n\t * @var  string\r\n\t *\/\r\n\tstatic protected $cap_required = \\'edit_theme_options\\';\r\n\r\n\t\/**\r\n\t * URL to the documentation\/info page of the pro plugin\r\n\t * @var  string\r\n\t *\/\r\n\tstatic public $pro_url = \\'http:\/\/premium.wpmudev.org\/project\/custom-sidebars-pro\/\\';\r\n\r\n\t\/**\r\n\t * Flag that specifies if the page is loaded in accessibility mode.\r\n\t * This plugin does not support accessibility mode!\r\n\t * @var   bool\r\n\t * @since 2.0.9\r\n\t *\/\r\n\tstatic protected $accessibility_mode = false;\r\n\r\n\r\n\t\/**\r\n\t * Returns the singleton instance of the custom sidebars class.\r\n\t *\r\n\t * @since  2.0\r\n\t *\/\r\n\tstatic public function instance() {\r\n\t\tstatic $Inst = null;\r\n\r\n\t\t\/\/ We can initialize the plugin once we know the current user:\r\n\t\t\/\/ The WDev()-&gt;pointer() notification is based on current user...\r\n\t\tif ( ! did_action( \\'set_current_user\\' ) ) {\r\n\t\t\tadd_action( \\'set_current_user\\', array( __CLASS__, \\'instance\\' ) );\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tif ( null === $Inst ) {\r\n\t\t\t$Inst = new CustomSidebars();\r\n\t\t}\r\n\r\n\t\treturn $Inst;\r\n\t}\r\n\r\n\t\/**\r\n\t * Private, since it is a singleton.\r\n\t * We directly initialize sidebar options when class is created.\r\n\t *\/\r\n\tprivate function __construct() {\r\n\t\t\/**\r\n\t\t * ID of the WP-Pointer used to introduce the plugin upon activation\r\n\t\t *\r\n\t\t * ========== Pointer ==========\r\n\t\t *  Internal ID:  wpmudcs1 [WPMUDev CustomSidebars 1]\r\n\t\t *  Point at:     #menu-appearance (Appearance menu item)\r\n\t\t *  Title:        Custom Sidebars\r\n\t\t *  Description:  Create and edit custom sidebars in your widget screen!\r\n\t\t * -------------------------------------------------------------------------\r\n\t\t *\/\r\n\t\tWDev()-&gt;pointer(\r\n\t\t\t\\'wpmudcs1\\',                               \/\/ Internal Pointer-ID\r\n\t\t\t\\'#menu-appearance\\',                       \/\/ Point at\r\n\t\t\t__( \\'Custom Sidebars\\', CSB_LANG ),    \/\/ Title\r\n\t\t\tsprintf(\r\n\t\t\t\t__(\r\n\t\t\t\t\t\\'Now you can create and edit custom sidebars in your \\' .\r\n\t\t\t\t\t\\'&lt;a href=\\&quot;%1$s\\&quot;&gt;Widgets screen&lt;\/a&gt;!\\', CSB_LANG\r\n\t\t\t\t),\r\n\t\t\t\tadmin_url( \\'widgets.php\\' )\r\n\t\t\t)                                         \/\/ Body\r\n\t\t);\r\n\r\n\t\t\/\/ Find out if the page is loaded in accessibility mode.\r\n\t\t$flag = isset( $_GET[\\'widgets-access\\'] ) ? $_GET[\\'widgets-access\\'] : get_user_setting( \\'widgets_access\\' );\r\n\t\tself::$accessibility_mode = ( \\'on\\' == $flag );\r\n\r\n\t\t\/\/ We don\\'t support accessibility mode. Display a note to the user.\r\n\t\tif ( true === self::$accessibility_mode ) {\r\n\t\t\tWDev()-&gt;message(\r\n\t\t\t\tsprintf(\r\n\t\t\t\t\t__(\r\n\t\t\t\t\t\t\\'&lt;strong&gt;Accessibility mode is not supported by the\r\n\t\t\t\t\t\t%1$s plugin.&lt;\/strong&gt;&lt;br \/&gt;&lt;a href=\\&quot;%2$s\\&quot;&gt;Click here&lt;\/a&gt;\r\n\t\t\t\t\t\tto disable accessibility mode and use the %1$s plugin!\\',\r\n\t\t\t\t\t\tCSB_LANG\r\n\t\t\t\t\t),\r\n\t\t\t\t\t\\'Custom Sidebars\\',\r\n\t\t\t\t\tadmin_url( \\'widgets.php?widgets-access=off\\' )\r\n\t\t\t\t),\r\n\t\t\t\t\\'err\\',\r\n\t\t\t\t\\'widgets\\'\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t\/\/ Load javascripts\/css files\r\n\t\t\tWDev()-&gt;add_ui( \\'core\\', \\'widgets.php\\' );\r\n\t\t\tWDev()-&gt;add_ui( \\'scrollbar\\', \\'widgets.php\\' );\r\n\t\t\tWDev()-&gt;add_ui( \\'select\\', \\'widgets.php\\' );\r\n\t\t\tWDev()-&gt;add_ui( CSB_JS_URL . \\'cs.min.js\\', \\'widgets.php\\' );\r\n\t\t\tWDev()-&gt;add_ui( CSB_CSS_URL . \\'cs.css\\', \\'widgets.php\\' );\r\n\r\n\t\t\t\/\/ AJAX actions\r\n\t\t\tadd_action( \\'wp_ajax_cs-ajax\\', array( $this, \\'ajax_handler\\' ) );\r\n\r\n\t\t\t\/\/ Extensions use this hook to initialize themselfs.\r\n\t\t\tdo_action( \\'cs_init\\' );\r\n\r\n\t\t\t\/\/ Display a message after import.\r\n\t\t\tif ( ! empty( $_GET[\\'cs-msg\\'] ) ) {\r\n\t\t\t\t$msg = base64_decode( $_GET[\\'cs-msg\\'] );\r\n\r\n\t\t\t\t\/\/ Prevent XSS attacks...\r\n\t\t\t\t$kses_args = array(\r\n\t\t\t\t\t\\'br\\' =&gt; array(),\r\n\t\t\t\t\t\\'b\\' =&gt; array(),\r\n\t\t\t\t\t\\'strong\\' =&gt; array(),\r\n\t\t\t\t\t\\'i\\' =&gt; array(),\r\n\t\t\t\t\t\\'em\\' =&gt; array(),\r\n\t\t\t\t);\r\n\t\t\t\t$msg = wp_kses( $msg, $kses_args );\r\n\r\n\t\t\t\tif ( ! empty( $msg ) ) {\r\n\t\t\t\t\tWDev()-&gt;message( $msg );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ Free version only\r\n\t\t\tadd_action( \\'in_widget_form\\', array( $this, \\'in_widget_form\\' ), 10, 1 );\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t\/\/ =========================================================================\r\n\t\/\/ == DATA ACCESS\r\n\t\/\/ =========================================================================\r\n\r\n\r\n\t\/**\r\n\t *\r\n\t * ==1== PLUGIN OPTIONS\r\n\t *   Option-Key: cs_modifiable\r\n\t *\r\n\t *   {\r\n\t *       \/\/ Sidebars that can be replaced:\r\n\t *       \\'modifiable\\': [\r\n\t *           \\'sidebar_1\\',\r\n\t *           \\'sidebar_2\\'\r\n\t *       ],\r\n\t *\r\n\t *       \/\/ Default replacements:\r\n\t *       \\'post_type_single\\': [ \/\/ Former \\&quot;defaults\\&quot;\r\n\t *           \\'post_type1\\': &lt;replacement-def&gt;,\r\n\t *           \\'post_type2\\': &lt;replacement-def&gt;\r\n\t *       ],\r\n\t *       \\'post_type_archive\\': [  \/\/ Former \\&quot;post_type_pages\\&quot;\r\n\t *           \\'post_type1\\': &lt;replacement-def&gt;,\r\n\t *           \\'post_type2\\': &lt;replacement-def&gt;\r\n\t *       ],\r\n\t *       \\'category_single\\': [ \/\/ Former \\&quot;category_posts\\&quot;\r\n\t *           \\'category_id1\\': &lt;replacement-def&gt;,\r\n\t *           \\'category_id2\\': &lt;replacement-def&gt;\r\n\t *       ],\r\n\t *       \\'category_archive\\': [ \/\/ Former \\&quot;category_pages\\&quot;\r\n\t *           \\'category_id1\\': &lt;replacement-def&gt;,\r\n\t *           \\'category_id2\\': &lt;replacement-def&gt;\r\n\t *       ],\r\n\t *       \\'blog\\': &lt;replacement-def&gt;,\r\n\t *       \\'tags\\': &lt;replacement-def&gt;,\r\n\t *       \\'authors\\': &lt;replacement-def&gt;,\r\n\t *       \\'search\\': &lt;replacement-def&gt;,\r\n\t *       \\'date\\': &lt;replacement-def&gt;\r\n\t *   }\r\n\t *\r\n\t * ==2== REPLACEMENT-DEF\r\n\t *   Meta-Key: _cs_replacements\r\n\t *   Option-Key: cs_modifiable &lt;replacement-def&gt;\r\n\t *\r\n\t *   {\r\n\t *       \\'sidebar_1\\': \\'custom_sb_id1\\',\r\n\t *       \\'sidebar_2\\': \\'custom_sb_id2\\'\r\n\t *   }\r\n\t *\r\n\t * ==3== SIDEBAR DEFINITION\r\n\t *   Option-Key: cs_sidebars\r\n\t *\r\n\t *   Array of these objects\r\n\t *   {\r\n\t *       id: \\'\\', \/\/ sidebar-id\r\n\t *       name: \\'\\',\r\n\t *       description: \\'\\',\r\n\t *       before_title: \\'\\',\r\n\t *       after_title: \\'\\',\r\n\t *       before_widget: \\'\\',\r\n\t *       after_widget: \\'\\'\r\n\t *   }\r\n\t *\r\n\t * ==4== WIDGET LIST\r\n\t *   Option-Key: sidebars_widgets\r\n\t *\r\n\t *   {\r\n\t *       \\'sidebar_id\\': [\r\n\t *           \\'widget_id1\\',\r\n\t *           \\'widget_id2\\'\r\n\t *       ],\r\n\t *       \\'sidebar_2\\': [\r\n\t *       ],\r\n\t *       \\'sidebar_3\\': [\r\n\t *           \\'widget_id1\\',\r\n\t *           \\'widget_id3\\'\r\n\t *       ],\r\n\t *   }\r\n\t *\/\r\n\r\n\r\n\t\/**\r\n\t * If the specified variable is an array it will be returned. Otherwise\r\n\t * an empty array is returned.\r\n\t *\r\n\t * @since  2.0\r\n\t * @param  mixed $val1 Value that maybe is an array.\r\n\t * @param  mixed $val2 Optional, Second value that maybe is an array.\r\n\t * @return array\r\n\t *\/\r\n\tstatic public function get_array( $val1, $val2 = array() ) {\r\n\t\tif ( is_array( $val1 ) ) {\r\n\t\t\treturn $val1;\r\n\t\t} else if ( is_array( $val2 ) ) {\r\n\t\t\treturn $val2;\r\n\t\t} else {\r\n\t\t\treturn array();\r\n\t\t}\r\n\t}\r\n\r\n\t\/**\r\n\t * Returns a list with sidebars that were marked as \\&quot;modifiable\\&quot;.\r\n\t * Also contains information on the default replacements of these sidebars.\r\n\t *\r\n\t * Option-Key: \\'cs_modifiable\\' (1)\r\n\t *\/\r\n\tstatic public function get_options( $key = null ) {\r\n\t\tstatic $Options = null;\r\n\t\t$need_update = false;\r\n\r\n\t\tif ( null === $Options ) {\r\n\t\t\t$Options = get_option( \\'cs_modifiable\\', array() );\r\n\t\t\tif ( ! is_array( $Options ) ) {\r\n\t\t\t\t$Options = array();\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ List of modifiable sidebars.\r\n\t\t\tif ( ! is_array( @$Options[\\'modifiable\\'] ) ) {\r\n\t\t\t\t\/\/ By default we make ALL theme sidebars replaceable:\r\n\t\t\t\t$all = self::get_sidebars( \\'theme\\' );\r\n\t\t\t\t$Options[\\'modifiable\\'] = array_keys( $all );\r\n\t\t\t\t$need_update = true;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t * In version 2.0 four config values have been renamed and are\r\n\t\t\t * migrated in the following block:\r\n\t\t\t *\/\r\n\r\n\t\t\t\/\/ Single\/Archive pages - new names\r\n\t\t\t$Options[\\'post_type_single\\'] = self::get_array(\r\n\t\t\t\t@$Options[\\'post_type_single\\'], \/\/ new name\r\n\t\t\t\t@$Options[\\'defaults\\']          \/\/ old name\r\n\t\t\t);\r\n\t\t\t$Options[\\'post_type_archive\\'] = self::get_array(\r\n\t\t\t\t@$Options[\\'post_type_archive\\'], \/\/ new name\r\n\t\t\t\t@$Options[\\'post_type_pages\\']    \/\/ old name\r\n\t\t\t);\r\n\t\t\t$Options[\\'category_single\\'] = self::get_array(\r\n\t\t\t\t@$Options[\\'category_single\\'], \/\/ new name\r\n\t\t\t\t@$Options[\\'category_posts\\']   \/\/ old name\r\n\t\t\t);\r\n\t\t\t$Options[\\'category_archive\\'] = self::get_array(\r\n\t\t\t\t@$Options[\\'category_archive\\'], \/\/ new name\r\n\t\t\t\t@$Options[\\'category_pages\\']    \/\/ old name\r\n\t\t\t);\r\n\r\n\t\t\t\/\/ Remove old item names from the array.\r\n\t\t\tif ( isset( $Options[\\'defaults\\'] ) ) {\r\n\t\t\t\tunset( $Options[\\'defaults\\'] );\r\n\t\t\t\t$need_update = true;\r\n\t\t\t}\r\n\t\t\tif ( isset( $Options[\\'post_type_pages\\'] ) ) {\r\n\t\t\t\tunset( $Options[\\'post_type_pages\\'] );\r\n\t\t\t\t$need_update = true;\r\n\t\t\t}\r\n\t\t\tif ( isset( $Options[\\'category_posts\\'] ) ) {\r\n\t\t\t\tunset( $Options[\\'category_posts\\'] );\r\n\t\t\t\t$need_update = true;\r\n\t\t\t}\r\n\t\t\tif ( isset( $Options[\\'category_pages\\'] ) ) {\r\n\t\t\t\tunset( $Options[\\'category_pages\\'] );\r\n\t\t\t\t$need_update = true;\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ Special archive pages\r\n\t\t\t$Options[\\'blog\\'] = self::get_array( @$Options[\\'blog\\'] );\r\n\t\t\t$Options[\\'tags\\'] = self::get_array( @$Options[\\'tags\\'] );\r\n\t\t\t$Options[\\'authors\\'] = self::get_array( @$Options[\\'authors\\'] );\r\n\t\t\t$Options[\\'search\\'] = self::get_array( @$Options[\\'search\\'] );\r\n\t\t\t$Options[\\'date\\'] = self::get_array( @$Options[\\'date\\'] );\r\n\r\n\t\t\t$Options = self::validate_options( $Options );\r\n\r\n\t\t\tif ( $need_update ) {\r\n\t\t\t\tself::set_options( $Options );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( ! empty( $key ) ) {\r\n\t\t\treturn @$Options[ $key ];\r\n\t\t} else {\r\n\t\t\treturn $Options;\r\n\t\t}\r\n\t}\r\n\r\n\t\/**\r\n\t * Saves the sidebar options to DB.\r\n\t *\r\n\t * Option-Key: \\'cs_modifiable\\' (1)\r\n\t * @since  2.0\r\n\t * @param  array $value The options array.\r\n\t *\/\r\n\tstatic public function set_options( $value ) {\r\n\t\t\/\/ Permission check.\r\n\t\tif ( ! current_user_can( self::$cap_required ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tupdate_option( \\'cs_modifiable\\', $value );\r\n\t}\r\n\r\n\t\/**\r\n\t * Removes invalid settings from the options array.\r\n\t *\r\n\t * @since  1.0.4\r\n\t * @param  array $data This array will be validated and returned.\r\n\t * @return array\r\n\t *\/\r\n\tstatic public function validate_options( $data = null ) {\r\n\t\t$data = (is_object( $data ) ? (array) $data : $data );\r\n\t\tif ( ! is_array( $data ) ) {\r\n\t\t\treturn array();\r\n\t\t}\r\n\t\t$valid = array_keys( self::get_sidebars( \\'theme\\' ) );\r\n\t\t$current = self::get_array( @$data[\\'modifiable\\'] );\r\n\r\n\t\t\/\/ Get all the sidebars that are modifiable AND exist.\r\n\t\t$modifiable = array_intersect( $valid, $current );\r\n\t\t$data[\\'modifiable\\'] = $modifiable;\r\n\r\n\t\treturn $data;\r\n\t}\r\n\r\n\t\/**\r\n\t * Returns a list with all custom sidebars that were created by the user.\r\n\t * Array of custom sidebars\r\n\t *\r\n\t * Option-Key: \\'cs_sidebars\\' (3)\r\n\t *\/\r\n\tstatic public function get_custom_sidebars() {\r\n\t\t$sidebars = get_option( \\'cs_sidebars\\', array() );\r\n\t\tif ( ! is_array( $sidebars ) ) {\r\n\t\t\t$sidebars = array();\r\n\t\t}\r\n\r\n\t\t\/\/ Remove invalid items.\r\n\t\tforeach ( $sidebars as $key =&gt; $data ) {\r\n\t\t\tif ( ! is_array( $data ) ) {\r\n\t\t\t\tunset( $sidebars[ $key ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $sidebars;\r\n\t}\r\n\r\n\t\/**\r\n\t * Saves the custom sidebars to DB.\r\n\t *\r\n\t * Option-Key: \\'cs_sidebars\\' (3)\r\n\t * @since  2.0\r\n\t *\/\r\n\tstatic public function set_custom_sidebars( $value ) {\r\n\t\t\/\/ Permission check.\r\n\t\tif ( ! current_user_can( self::$cap_required ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tupdate_option( \\'cs_sidebars\\', $value );\r\n\t}\r\n\r\n\t\/**\r\n\t * Returns a list of all registered sidebars including a list of their\r\n\t * widgets (this is stored inside a WordPress core option).\r\n\t *\r\n\t * Option-Key: \\'sidebars_widgets\\' (4)\r\n\t * @since  2.0\r\n\t *\/\r\n\tstatic public function get_sidebar_widgets() {\r\n\t\treturn get_option( \\'sidebars_widgets\\', array() );\r\n\t}\r\n\r\n\t\/**\r\n\t * Update the WordPress core settings for sidebar widgets:\r\n\t * 1. Add empty widget information for new sidebars.\r\n\t * 2. Remove widget information for sidebars that no longer exist.\r\n\t *\r\n\t * Option-Key: \\'sidebars_widgets\\' (4)\r\n\t *\/\r\n\tstatic public function refresh_sidebar_widgets() {\r\n\t\t\/\/ Contains an array of all sidebars and widgets inside each sidebar.\r\n\t\t$widgetized_sidebars = self::get_sidebar_widgets();\r\n\r\n\t\t$cs_sidebars = self::get_custom_sidebars();\r\n\t\t$delete_widgetized_sidebars = array();\r\n\r\n\r\n\t\tforeach ( $widgetized_sidebars as $id =&gt; $bar ) {\r\n\t\t\tif ( substr( $id, 0, 3 ) == self::$sidebar_prefix ) {\r\n\t\t\t\t$found = FALSE;\r\n\t\t\t\tforeach ( $cs_sidebars as $csbar ) {\r\n\t\t\t\t\tif ( $csbar[\\'id\\'] == $id ) {\r\n\t\t\t\t\t\t$found = TRUE;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif ( ! $found ) {\r\n\t\t\t\t\t$delete_widgetized_sidebars[] = $id;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$all_ids = array_keys( $widgetized_sidebars );\r\n\t\tforeach ( $cs_sidebars as $cs ) {\r\n\t\t\t$sb_id = $cs[\\'id\\'];\r\n\t\t\tif ( ! in_array( $sb_id, $all_ids ) ) {\r\n\t\t\t\t$widgetized_sidebars[$sb_id] = array();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tforeach ( $delete_widgetized_sidebars as $id ) {\r\n\t\t\tunset( $widgetized_sidebars[$id] );\r\n\t\t}\r\n\r\n\t\tupdate_option( \\'sidebars_widgets\\', $widgetized_sidebars );\r\n\t}\r\n\r\n\t\/**\r\n\t * Returns the custom sidebar metadata of a single post.\r\n\t *\r\n\t * Meta-Key: \\'_cs_replacements\\' (2)\r\n\t * @since  2.0\r\n\t *\/\r\n\tstatic public function get_post_meta( $post_id ) {\r\n\t\t$data = get_post_meta( $post_id, \\'_cs_replacements\\', TRUE );\r\n\t\tif ( ! is_array( $data ) ) {\r\n\t\t\t$data = array();\r\n\t\t}\r\n\t\treturn $data;\r\n\t}\r\n\r\n\t\/**\r\n\t * Saves custom sidebar metadata to a single post.\r\n\t *\r\n\t * Meta-Key: \\'_cs_replacements\\' (2)\r\n\t * @since  2.0\r\n\t * @param int $post_id\r\n\t * @param array $data When array is empty the meta data will be deleted.\r\n\t *\/\r\n\tstatic public function set_post_meta( $post_id, $data ) {\r\n\t\tif ( ! empty( $data ) ) {\r\n\t\t\tupdate_post_meta( $post_id, \\'_cs_replacements\\', $data );\r\n\t\t} else {\r\n\t\t\tdelete_post_meta( $post_id, \\'_cs_replacements\\' );\r\n\t\t}\r\n\t}\r\n\r\n\t\/**\r\n\t * Returns a list of all sidebars available.\r\n\t * Depending on the parameter this will be either all sidebars or only\r\n\t * sidebars defined by the current theme.\r\n\t *\r\n\t * @param string $type [all|cust|theme] What kind of sidebars to return.\r\n\t *\/\r\n\tstatic public function get_sidebars( $type = \\'theme\\' ) {\r\n\t\tglobal $wp_registered_sidebars;\r\n\t\t$allsidebars = $wp_registered_sidebars;\r\n\t\t$result = array();\r\n\r\n\t\t\/\/ Remove inactive sidebars.\r\n\t\tforeach ( $allsidebars as $sb_id =&gt; $sidebar ) {\r\n\t\t\tif ( false !== strpos( $sidebar[\\'class\\'], \\'inactive-sidebar\\' ) ) {\r\n\t\t\t\tunset( $allsidebars[$sb_id] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tksort( $allsidebars );\r\n\t\tif ( $type == \\'all\\' ) {\r\n\t\t\t$result = $allsidebars;\r\n\t\t} else if ( $type == \\'cust\\' ) {\r\n\t\t\tforeach ( $allsidebars as $key =&gt; $sb ) {\r\n\t\t\t\t\/\/ Only keep custom sidebars in the results.\r\n\t\t\t\tif ( substr( $key, 0, 3 ) == self::$sidebar_prefix ) {\r\n\t\t\t\t\t$result[$key] = $sb;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if ( $type == \\'theme\\' ) {\r\n\t\t\tforeach ( $allsidebars as $key =&gt; $sb ) {\r\n\t\t\t\t\/\/ Remove custom sidebars from results.\r\n\t\t\t\tif ( substr( $key, 0, 3 ) != self::$sidebar_prefix ) {\r\n\t\t\t\t\t$result[$key] = $sb;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $result;\r\n\t}\r\n\r\n\t\/**\r\n\t * Returns the sidebar with the specified ID.\r\n\t * Sidebar can be both a custom sidebar or theme sidebar.\r\n\t *\r\n\t * @param string $id Sidebar-ID.\r\n\t * @param string $type [all|cust|theme] What kind of sidebars to check.\r\n\t *\/\r\n\tstatic public function get_sidebar( $id, $type = \\'all\\' ) {\r\n\t\tif ( empty( $id ) ) { return false; }\r\n\r\n\t\t\/\/ Get all sidebars\r\n\t\t$sidebars = self::get_sidebars( $type );\r\n\r\n\t\tif ( isset( $sidebars[ $id ] ) ) {\r\n\t\t\treturn $sidebars[ $id ];\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t\/**\r\n\t * Get sidebar replacement information for a single post.\r\n\t *\/\r\n\tstatic public function get_replacements( $postid ) {\r\n\t\t$replacements = self::get_post_meta( $postid );\r\n\t\tif ( ! is_array( $replacements ) ) {\r\n\t\t\t$replacements = array();\r\n\t\t} else {\r\n\t\t\t$replacements = $replacements;\r\n\t\t}\r\n\t\treturn $replacements;\r\n\t}\r\n\r\n\t\/**\r\n\t * Returns true, when the specified post type supports custom sidebars.\r\n\t *\r\n\t * @since  2.0\r\n\t * @param  object|string $posttype The posttype to validate. Either the\r\n\t *                posttype name or the full posttype object.\r\n\t * @return bool\r\n\t *\/\r\n\tstatic public function supported_post_type( $posttype ) {\r\n\t\t$Ignored_types = null;\r\n\t\t$Response = array();\r\n\r\n\t\tif ( null === $Ignored_types ) {\r\n\t\t\t$Ignored_types = get_post_types(\r\n\t\t\t\tarray( \\'public\\' =&gt; false ),\r\n\t\t\t\t\\'names\\'\r\n\t\t\t);\r\n\t\t\t$Ignored_types[] = \\'attachment\\';\r\n\t\t}\r\n\r\n\t\tif ( is_object( $posttype ) ) {\r\n\t\t\t$posttype = $posttype-&gt;name;\r\n\t\t}\r\n\r\n\t\tif ( ! isset( $Response[ $posttype ] ) ) {\r\n\t\t\t$response = ! in_array( $posttype, $Ignored_types );\r\n\r\n\t\t\t\/**\r\n\t\t\t * Filters the support-flag. The flag defines if the posttype supports\r\n\t\t\t * custom sidebars or not.\r\n\t\t\t *\r\n\t\t\t * @since  2.0\r\n\t\t\t *\r\n\t\t\t * @param  bool $response Flag if the posttype is supported.\r\n\t\t\t * @param  string $posttype Name of the posttype that is checked.\r\n\t\t\t *\/\r\n\t\t\t$response = apply_filters( \\'cs_support_posttype\\', $response, $posttype );\r\n\t\t\t$Response[ $posttype ] = $response;\r\n\t\t}\r\n\r\n\t\treturn $Response[ $posttype ];\r\n\t}\r\n\r\n\t\/**\r\n\t * Returns a list of all post types that support custom sidebars.\r\n\t *\r\n\t * @uses   self::supported_post_type()\r\n\t * @param  string $type [names|objects] Defines details of return data.\r\n\t * @return array List of posttype names or objects, depending on the param.\r\n\t *\/\r\n\tstatic public function get_post_types( $type = \\'names\\' ) {\r\n\t\t$Valid = array();\r\n\r\n\t\tif ( $type != \\'objects\\' ) {\r\n\t\t\t$type = \\'names\\';\r\n\t\t}\r\n\r\n\t\tif ( ! isset( $Valid[ $type ] ) ) {\r\n\t\t\t$all = get_post_types( array(), $type );\r\n\t\t\t$Valid[ $type ] = array();\r\n\r\n\t\t\tforeach ( $all as $post_type ) {\r\n\t\t\t\tif ( self::supported_post_type( $post_type ) ) {\r\n\t\t\t\t\t$Valid[ $type ][] = $post_type;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $Valid[ $type ];\r\n\t}\r\n\r\n\t\/**\r\n\t * Returns an array of all categories.\r\n\t *\r\n\t * @since  2.0\r\n\t * @return array List of categories, including empty ones.\r\n\t *\/\r\n\tstatic public function get_all_categories() {\r\n\t\t$args = array(\r\n\t\t\t\\'hide_empty\\' =&gt; 0,\r\n\t\t\t\\'taxonomy\\' =&gt; \\'category\\',\r\n\t\t);\r\n\r\n\t\treturn get_categories( $args );\r\n\t}\r\n\r\n\t\/**\r\n\t * Returns a sorted list of all category terms of the current post.\r\n\t * This information is used to find sidebar replacements.\r\n\t *\r\n\t * @uses  self::cmp_cat_level()\r\n\t *\/\r\n\tstatic public function get_sorted_categories( $post_id = null ) {\r\n\t\tstatic $Sorted = array();\r\n\r\n\t\t\/\/ Return categories of current post when no post_id is specified.\r\n\t\t$post_id = empty( $post_id ) ? get_the_ID() : $post_id;\r\n\r\n\t\tif ( ! isset( $Sorted[ $post_id ] ) ) {\r\n\t\t\t$Sorted[ $post_id ] = get_the_category( $post_id );\r\n\t\t\t@usort( $Sorted[ $post_id ], array( self, \\'cmp_cat_level\\' ) );\r\n\t\t}\r\n\t\treturn $Sorted[ $post_id ];\r\n\t}\r\n\r\n\t\/**\r\n\t * Helper function used to sort categories.\r\n\t *\r\n\t * @uses  self::get_category_level()\r\n\t *\/\r\n\tstatic public function cmp_cat_level( $cat1, $cat2 ) {\r\n\t\t$l1 = self::get_category_level( $cat1-&gt;cat_ID );\r\n\t\t$l2 = self::get_category_level( $cat2-&gt;cat_ID );\r\n\t\tif ( $l1 == $l2 ) {\r\n\t\t\treturn strcasecmp( $cat1-&gt;name, $cat1-&gt;name );\r\n\t\t} else {\r\n\t\t\treturn $l1 &lt; $l2 ? 1 : -1;\r\n\t\t}\r\n\t}\r\n\r\n\t\/**\r\n\t * Helper function used to sort categories.\r\n\t *\/\r\n\tstatic public function get_category_level( $catid ) {\r\n\t\tif ( $catid == 0 ) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t$cat = get_category( $catid );\r\n\t\treturn 1 + self::get_category_level( $cat-&gt;category_parent );\r\n\t}\r\n\r\n\r\n\t\/\/ =========================================================================\r\n\t\/\/ == ACTION HOOKS\r\n\t\/\/ =========================================================================\r\n\r\n\r\n\t\/**\r\n\t * Callback for in_widget_form action\r\n\t *\r\n\t * Free version only\r\n\t *\r\n\t * @since 2.0.1\r\n\t *\/\r\n\tpublic function in_widget_form( $widget ) {\r\n\t\t?&gt;\r\n\t\t&lt;input type=\\&quot;hidden\\&quot; name=\\&quot;csb-buttons\\&quot; value=\\&quot;0\\&quot; \/&gt;\r\n\t\t&lt;?php if ( ! isset( $_POST[ \\'csb-buttons\\' ] ) ) : ?&gt;\r\n\t\t\t&lt;div class=\\&quot;csb-pro-layer csb-pro-&lt;?php echo esc_attr( $widget-&gt;id ); ?&gt;\\&quot;&gt;\r\n\t\t\t\t&lt;a href=\\&quot;#\\&quot; class=\\&quot;button csb-clone-button\\&quot;&gt;&lt;?php _e( \\'Clone\\', CSB_LANG ); ?&gt;&lt;\/a&gt;\r\n\t\t\t\t&lt;a href=\\&quot;#\\&quot; class=\\&quot;button csb-visibility-button\\&quot;&gt;&lt;span class=\\&quot;dashicons dashicons-visibility\\&quot;&gt;&lt;\/span&gt; &lt;?php _e( \\'Visibility\\', CSB_LANG ); ?&gt;&lt;\/a&gt;\r\n\t\t\t\t&lt;a href=\\&quot;&lt;?php echo esc_url( CustomSidebars::$pro_url ); ?&gt;\\&quot; target=\\&quot;_blank\\&quot; class=\\&quot;pro-info\\&quot;&gt;\r\n\t\t\t\t&lt;?php printf(\r\n\t\t\t\t\t__( \\'Pro Version Features\\', CSB_LANG ),\r\n\t\t\t\t\tCustomSidebars::$pro_url\r\n\t\t\t\t); ?&gt;\r\n\t\t\t\t&lt;\/a&gt;\r\n\t\t\t&lt;\/div&gt;\r\n\t\t&lt;?php\r\n\t\tendif;\r\n\t}\r\n\r\n\r\n\t\/\/ =========================================================================\r\n\t\/\/ == AJAX FUNCTIONS\r\n\t\/\/ =========================================================================\r\n\r\n\r\n\r\n\r\n\r\n\t\/**\r\n\t * Output JSON data and die()\r\n\t *\r\n\t * @since  1.0.0\r\n\t *\/\r\n\tstatic protected function json_response( $obj ) {\r\n\t\t\/\/ Flush any output that was made prior to this function call\r\n\t\twhile ( 0 &lt; ob_get_level() ) { ob_end_clean(); }\r\n\r\n\t\theader( \\'Content-Type: application\/json\\' );\r\n\t\techo json_encode( (object) $obj );\r\n\t\tdie();\r\n\t}\r\n\r\n\t\/**\r\n\t * Output HTML data and die()\r\n\t *\r\n\t * @since  2.0\r\n\t *\/\r\n\tstatic protected function plain_response( $data ) {\r\n\t\t\/\/ Flush any output that was made prior to this function call\r\n\t\twhile ( 0 &lt; ob_get_level() ) { ob_end_clean(); }\r\n\r\n\t\theader( \\'Content-Type: text\/plain\\' );\r\n\t\techo \\'\\' . $data;\r\n\t\tdie();\r\n\t}\r\n\r\n\t\/**\r\n\t * Sets the response object to ERR state with the specified message\/reason.\r\n\t *\r\n\t * @since  2.0\r\n\t * @param  object $req Initial response object.\r\n\t * @param  string $message Error message or reason; already translated.\r\n\t * @return object Updated response object.\r\n\t *\/\r\n\tstatic protected function req_err( $req, $message ) {\r\n\t\t$req-&gt;status = \\'ERR\\';\r\n\t\t$req-&gt;message = $message;\r\n\t\treturn $req;\r\n\t}\r\n\r\n\t\/**\r\n\t * All Ajax request are handled by this function.\r\n\t * It analyzes the post-data and calls the required functions to execute\r\n\t * the requested action.\r\n\t *\r\n\t * --------------------------------\r\n\t *\r\n\t * IMPORTANT! ANY SERVER RESPONSE MUST BE MADE VIA ONE OF THESE FUNCTIONS!\r\n\t * Using direct `echo` or include an html file will not work.\r\n\t *\r\n\t *    self::json_response( $obj )\r\n\t *    self::plain_response( $text )\r\n\t *\r\n\t * --------------------------------\r\n\t *\r\n\t * @since  1.0.0\r\n\t *\/\r\n\tpublic function ajax_handler() {\r\n\t\t\/\/ Permission check.\r\n\t\tif ( ! current_user_can( self::$cap_required ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t\/\/ Try to disable debug output for ajax handlers of this plugin.\r\n\t\tif ( defined( \\'WP_DEBUG\\' ) &amp;&amp; WP_DEBUG ) {\r\n\t\t\tdefined( \\'WP_DEBUG_DISPLAY\\' ) || define( \\'WP_DEBUG_DISPLAY\\', false );\r\n\t\t\tdefined( \\'WP_DEBUG_LOG\\' ) || define( \\'WP_DEBUG_LOG\\', true );\r\n\t\t}\r\n\t\t\/\/ Catch any unexpected output via output buffering.\r\n\t\tob_start();\r\n\r\n\t\t$action = @$_POST[\\'do\\'];\r\n\t\t$get_action = @$_GET[\\'do\\'];\r\n\r\n\t\t\/**\r\n\t\t * Notify all extensions about the ajax call.\r\n\t\t *\r\n\t\t * @since  2.0\r\n\t\t * @param  string $action The specified ajax action.\r\n\t\t *\/\r\n\t\tdo_action( \\'cs_ajax_request\\', $action );\r\n\r\n\t\t\/**\r\n\t\t * Notify all extensions about the GET ajax call.\r\n\t\t *\r\n\t\t * @since  2.0.9.7\r\n\t\t * @param  string $action The specified ajax action.\r\n\t\t *\/\r\n\t\tdo_action( \\'cs_ajax_request_get\\', $get_action );\r\n\t}\r\n};\r\n"
    },
    "sidebars": [],
    "options": {
        "modifiable": {
            "0": "header-right",
            "1": "lower-footer",
            "2": "main-footer",
            "4": "primary-sidebar",
            "5": "top-bar"
        },
        "authors": [],
        "blog": [],
        "category_archive": [],
        "category_pages": null,
        "category_posts": null,
        "category_single": [],
        "date": [],
        "defaults": null,
        "post_type_archive": [],
        "post_type_pages": null,
        "post_type_single": [],
        "search": [],
        "tags": [],
        "screen": null
    },
    "categories": [
        {
            "term_id": 12,
            "name": "ADMOB",
            "slug": "admob",
            "term_group": 0,
            "term_taxonomy_id": 12,
            "taxonomy": "category",
            "description": "ADMOB NEWS",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 12,
            "category_count": 0,
            "category_description": "ADMOB NEWS",
            "cat_name": "ADMOB",
            "category_nicename": "admob",
            "category_parent": 0
        },
        {
            "term_id": 11,
            "name": "ADSENSE",
            "slug": "adsense",
            "term_group": 0,
            "term_taxonomy_id": 11,
            "taxonomy": "category",
            "description": "ADSENSE NEWS",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 11,
            "category_count": 0,
            "category_description": "ADSENSE NEWS",
            "cat_name": "ADSENSE",
            "category_nicename": "adsense",
            "category_parent": 0
        },
        {
            "term_id": 3,
            "name": "ANDROID TIPS",
            "slug": "android-tips",
            "term_group": 0,
            "term_taxonomy_id": 3,
            "taxonomy": "category",
            "description": "ANDROID TIPS POST",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 3,
            "category_count": 0,
            "category_description": "ANDROID TIPS POST",
            "cat_name": "ANDROID TIPS",
            "category_nicename": "android-tips",
            "category_parent": 0
        },
        {
            "term_id": 4,
            "name": "BLOG",
            "slug": "blog",
            "term_group": 0,
            "term_taxonomy_id": 4,
            "taxonomy": "category",
            "description": "BLOG POST",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 4,
            "category_count": 0,
            "category_description": "BLOG POST",
            "cat_name": "BLOG",
            "category_nicename": "blog",
            "category_parent": 0
        },
        {
            "term_id": 13,
            "name": "BLOGGER",
            "slug": "blogger",
            "term_group": 0,
            "term_taxonomy_id": 13,
            "taxonomy": "category",
            "description": "BLOGGER POST",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 13,
            "category_count": 0,
            "category_description": "BLOGGER POST",
            "cat_name": "BLOGGER",
            "category_nicename": "blogger",
            "category_parent": 0
        },
        {
            "term_id": 7,
            "name": "COMPUTER",
            "slug": "computer",
            "term_group": 0,
            "term_taxonomy_id": 7,
            "taxonomy": "category",
            "description": "COMPUTER POST",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 7,
            "category_count": 0,
            "category_description": "COMPUTER POST",
            "cat_name": "COMPUTER",
            "category_nicename": "computer",
            "category_parent": 0
        },
        {
            "term_id": 9,
            "name": "EARN MONEY",
            "slug": "earn-money",
            "term_group": 0,
            "term_taxonomy_id": 9,
            "taxonomy": "category",
            "description": "EARN MONEY POST",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 9,
            "category_count": 0,
            "category_description": "EARN MONEY POST",
            "cat_name": "EARN MONEY",
            "category_nicename": "earn-money",
            "category_parent": 0
        },
        {
            "term_id": 6,
            "name": "HOW TO",
            "slug": "how-to",
            "term_group": 0,
            "term_taxonomy_id": 6,
            "taxonomy": "category",
            "description": "HOW TO",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 6,
            "category_count": 0,
            "category_description": "HOW TO",
            "cat_name": "HOW TO",
            "category_nicename": "how-to",
            "category_parent": 0
        },
        {
            "term_id": 8,
            "name": "SECURITY",
            "slug": "security",
            "term_group": 0,
            "term_taxonomy_id": 8,
            "taxonomy": "category",
            "description": "SECURITY POST",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 8,
            "category_count": 0,
            "category_description": "SECURITY POST",
            "cat_name": "SECURITY",
            "category_nicename": "security",
            "category_parent": 0
        },
        {
            "term_id": 5,
            "name": "SEO TIPS",
            "slug": "seo-tips",
            "term_group": 0,
            "term_taxonomy_id": 5,
            "taxonomy": "category",
            "description": "SEO TIPS POST",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 5,
            "category_count": 0,
            "category_description": "SEO TIPS POST",
            "cat_name": "SEO TIPS",
            "category_nicename": "seo-tips",
            "category_parent": 0
        },
        {
            "term_id": 10,
            "name": "TECHNOLOGY",
            "slug": "technology",
            "term_group": 0,
            "term_taxonomy_id": 10,
            "taxonomy": "category",
            "description": "TECHNOLOGY NEWS",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 10,
            "category_count": 0,
            "category_description": "TECHNOLOGY NEWS",
            "cat_name": "TECHNOLOGY",
            "category_nicename": "technology",
            "category_parent": 0
        },
        {
            "term_id": 1,
            "name": "Uncategorized",
            "slug": "uncategorized",
            "term_group": 0,
            "term_taxonomy_id": 1,
            "taxonomy": "category",
            "description": "",
            "parent": 0,
            "count": 1,
            "filter": "raw",
            "cat_ID": 1,
            "category_count": 1,
            "category_description": "",
            "cat_name": "Uncategorized",
            "category_nicename": "uncategorized",
            "category_parent": 0
        },
        {
            "term_id": 14,
            "name": "WORDPRESS",
            "slug": "wordpress",
            "term_group": 0,
            "term_taxonomy_id": 14,
            "taxonomy": "category",
            "description": "WORDPRESS POST",
            "parent": 0,
            "count": 0,
            "filter": "raw",
            "cat_ID": 14,
            "category_count": 0,
            "category_description": "WORDPRESS POST",
            "cat_name": "WORDPRESS",
            "category_nicename": "wordpress",
            "category_parent": 0
        }
    ],
    "widgets": {
        "primary-sidebar": [],
        "top-bar": [],
        "header-right": [],
        "main-footer": [],
        "lower-footer": [],
        "mega-menu": [],
        "array_version": 3
    }
}